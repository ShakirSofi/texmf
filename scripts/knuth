#! /usr/bin/python

################################################################################
# imports
################################################################################
import sys
import argparse
import subprocess
import os
import glob
import textwrap
import termcolor
import itertools

################################################################################
# constants
################################################################################
LATEX            = "pdflatex"
OUTPUT_DIRECTORY = ".knuth-out"
LATEX_OPTIONS    = ["-synctex=1", "-interaction=nonstopmode"]
PYTHONTEX        = "pythontex"

################################################################################
# helpers
################################################################################
def getlines(s):
    """Returns a list of newline delimited lines in s"""
    return s.strip().split("\n")

def listify(x):
    if (x is None):
        return []

    if (type(x) != list):
        return [x]

    return x

class Out(object):
    WARNING_COLOR = "yellow"
    ERROR_COLOR   = "red"
    ATTRS         = [{"attrs": []}, {"attrs": ["bold"]}]
    ATTRS_INDEX   = 0

    def __init__(self, err, output):
        assert type(err)    == int
        assert type(output) == list

        self.err_    = err
        self.output_ = output

    def __nonzero__(self):
        return self.err_ == 0

    def parse_(self):
        messages = []
        warning  = ""
        error    = ""
        seen_newline = False

        for line in self.output_:
            if (warning != "" and line.strip() != ""):
                warning += "\n" + line.strip()
                seen_newline = False
                continue

            if (error != "" and line.strip() != ""):
                error += "\n" + line.strip()
                seen_newline = False
                continue
            
            if (line.strip() == ""):
                if (error != "" and not seen_newline):
                    seen_newline = True
                    error += "\n"
                    continue

                if (warning != ""):
                    message = termcolor.colored(warning, Out.WARNING_COLOR, **Out.ATTRS[Out.ATTRS_INDEX])
                    messages += [message]
                    Out.ATTRS_INDEX = 1 - Out.ATTRS_INDEX
                    warning = ""
                    seen_newline = False
                    continue
                     
                if (error != ""):
                    message = termcolor.colored(error, Out.ERROR_COLOR, **Out.ATTRS[Out.ATTRS_INDEX])
                    messages += [message]
                    Out.ATTRS_INDEX = 1 - Out.ATTRS_INDEX
                    error = ""
                    seen_newline = False
                    continue

            if (line.startswith("!")):
                error = line.strip()
                continue
            
            if ("Warning" in line):
                warning = line.strip()
                continue
    
        return "\n".join([message.strip() for message in messages])

    def str(self, args):
        if (args.verbose):
            output = "\n".join(self.output_)
            if (self.__nonzero__()):
                return output
            else:
                return termcolor.colored(output, "red")
        
        return self.parse_()

    def __str__(self):
        return "\n".join(self.output_)

    def __call__(self):
        return self.output_

def bind(clargs, out, f, *args, **kwargs):
    if (out):
        out = f(*args, **kwargs)

        message = out.str(clargs)
        if (message.strip() != ""):
            print message

        return out
    return out

def cmd(commands):
    def cmd_(args=None):
        comms = listify(commands)
        args  = listify(args) 
        
        try:
            output = getlines(subprocess.check_output(comms + args))
            return Out(0, output)
        except subprocess.CalledProcessError as e:
            return Out(e.returncode, getlines(e.output))

    return cmd_

def fglob(f, g):
    globs = glob.glob(g)
    if (globs != []):
        f(globs)

ls        = cmd("ls")
rm        = cmd("rm")
rmr       = cmd(["rm", "-r"])
mv        = cmd("mv")
mkdir     = cmd("mkdir")
latex     = cmd([LATEX] + LATEX_OPTIONS)
pythontex = cmd(PYTHONTEX)

def exit_on_error(out):
    if (not out):
        sys.exit(out.err_)

################################################################################
# commands
################################################################################
def build(args):
    rmr(["-f", OUTPUT_DIRECTORY])
    old_files = set(ls()())
    
    out = mkdir(["-p", OUTPUT_DIRECTORY])
    out = bind(args, out, latex, args.files)
    
    if (args.ipython): 
        out = bind(args, out, pythontex, args.files)

    out = bind(args, out, latex, args.files)
    out = bind(args, out, latex, args.files)

    new_files = set(ls()())
    tmp_files = new_files - old_files
    for tmp_file in tmp_files:
        if (not tmp_file.endswith("pdf") and tmp_file != OUTPUT_DIRECTORY):
            mv(["-f", tmp_file, OUTPUT_DIRECTORY])
    
    exit_on_error(out)

def clean(args):
    if (os.path.exists(OUTPUT_DIRECTORY)):
        rmr(OUTPUT_DIRECTORY)

    if (args.keep_pdf == False):
        fglob(rm, "*.pdf")

def sanitize(args):
    garbage_files = ["*.aux", "*.log", "*.out", "*.gz", "*.pytxcode"]
    if (args.keep_pdf == False):
        garbage_files += ["*.pdf"]

    garbage_directories = [OUTPUT_DIRECTORY, "pythontex-files-*"]
    
    map(lambda s: fglob(rm, s),  garbage_files)
    map(lambda s: fglob(rmr, s), garbage_directories)
 
def makefile(args):
    basename = os.path.basename(args.file).split(".")[0]
    ipython  = "--ipython" if args.ipython else ""

    s = """
    TEXFILE = {}

    $(TEXFILE).pdf: $(TEXFILE).tex
    \tknuth build {} $<

    .PHONY: clean
    clean:
    \tknuth clean

    .PHONY: tidy
    tidy:
    \tknuth clean --keep-pdf

    .PHONY: sanitize
    sanitize:
    \tknuth sanitize

    view: $(TEXFILE).pdf
    \tif command -v evince; then evince $<; \\
    \telif command -v open; then open $<; \\
    \telse echo "ERROR: unable to open pdf. Try installing evince"; fi
    """.format(basename, ipython)

    print textwrap.dedent(s).strip()
    

################################################################################
# parsers
################################################################################
def init_parser_build(subparsers):
    parser = subparsers.add_parser("build")
    parser.set_defaults(func=build)
    
    parser.add_argument(\
        'files',
        nargs = "+",
        help  = "latex files"
    )

    parser.add_argument(\
        "-i", "--ipython",
        action="store_true",
        help="enable ipython compilation"
    )
    
    parser.add_argument(\
        "-v", "--verbose", 
        action  = "store_true", 
        help    = "enable verbosity"
    )

def init_parser_clean(subparsers):
    parser = subparsers.add_parser("clean")
    parser.set_defaults(func=clean)

    parser.add_argument(\
        "--keep-pdf",
        action="store_true",
        help="do not remove pdf's"
    )

def init_parser_sanitize(subparsers):
    parser = subparsers.add_parser("sanitize")
    parser.set_defaults(func=sanitize)

    parser.add_argument(\
        "--keep-pdf",
        action="store_true",
        help="do not remove pdf's"
    )

def init_parser_makefile(subparsers):
    parser = subparsers.add_parser("makefile")
    parser.set_defaults(func=makefile)

    parser.add_argument(\
        'file',
        help  = "a latex file to build"
    )

    parser.add_argument(\
        "-i", "--ipython",
        action="store_true",
        help="enable ipython compilation in the Makefile"
    )

def init_parser():
    parser = argparse.ArgumentParser(\
        prog="knuth", 
        description="A latex compiler orchestrator"
    )

    subparsers = parser.add_subparsers()
    init_parser_build(subparsers)
    init_parser_clean(subparsers)
    init_parser_sanitize(subparsers)
    init_parser_makefile(subparsers)

    return parser

def main():
    parser = init_parser()
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
